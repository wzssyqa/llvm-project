; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --mtriple=mipsisa32r6 < %s | FileCheck %s --check-prefix=MIPS32R6
; RUN: llc --mtriple=mips < %s | FileCheck %s --check-prefix=MIPS32

declare float @llvm.maxnum.f32(float, float)
declare double @llvm.maxnum.f64(double, double)
declare float @llvm.minnum.f32(float, float)
declare double @llvm.minnum.f64(double, double)

define float @maxnum_float(float %x, float %y) {
; MIPS32R6-LABEL: maxnum_float:
; MIPS32R6:       # %bb.0:
; MIPS32R6-NEXT:    jr $ra
; MIPS32R6-NEXT:    max.s $f0, $f12, $f14
;
; MIPS32-LABEL: maxnum_float:
; MIPS32:       # %bb.0:
; MIPS32-NEXT:    addiu $sp, $sp, -24
; MIPS32-NEXT:    .cfi_def_cfa_offset 24
; MIPS32-NEXT:    sw $ra, 20($sp) # 4-byte Folded Spill
; MIPS32-NEXT:    .cfi_offset 31, -4
; MIPS32-NEXT:    jal fmaxf
; MIPS32-NEXT:    nop
; MIPS32-NEXT:    lw $ra, 20($sp) # 4-byte Folded Reload
; MIPS32-NEXT:    jr $ra
; MIPS32-NEXT:    addiu $sp, $sp, 24
  %z = call float @llvm.maxnum.f32(float %x, float %y)
  ret float %z
}

define double @maxnum_double(double %x, double %y) {
; MIPS32R6-LABEL: maxnum_double:
; MIPS32R6:       # %bb.0:
; MIPS32R6-NEXT:    jr $ra
; MIPS32R6-NEXT:    max.d $f0, $f12, $f14
;
; MIPS32-LABEL: maxnum_double:
; MIPS32:       # %bb.0:
; MIPS32-NEXT:    addiu $sp, $sp, -24
; MIPS32-NEXT:    .cfi_def_cfa_offset 24
; MIPS32-NEXT:    sw $ra, 20($sp) # 4-byte Folded Spill
; MIPS32-NEXT:    .cfi_offset 31, -4
; MIPS32-NEXT:    jal fmax
; MIPS32-NEXT:    nop
; MIPS32-NEXT:    lw $ra, 20($sp) # 4-byte Folded Reload
; MIPS32-NEXT:    jr $ra
; MIPS32-NEXT:    addiu $sp, $sp, 24
  %z = call double @llvm.maxnum.f64(double %x, double %y)
  ret double %z
}

define float @minnum_float(float %x, float %y) {
; MIPS32R6-LABEL: minnum_float:
; MIPS32R6:       # %bb.0:
; MIPS32R6-NEXT:    jr $ra
; MIPS32R6-NEXT:    min.s $f0, $f12, $f14
;
; MIPS32-LABEL: minnum_float:
; MIPS32:       # %bb.0:
; MIPS32-NEXT:    addiu $sp, $sp, -24
; MIPS32-NEXT:    .cfi_def_cfa_offset 24
; MIPS32-NEXT:    sw $ra, 20($sp) # 4-byte Folded Spill
; MIPS32-NEXT:    .cfi_offset 31, -4
; MIPS32-NEXT:    jal fminf
; MIPS32-NEXT:    nop
; MIPS32-NEXT:    lw $ra, 20($sp) # 4-byte Folded Reload
; MIPS32-NEXT:    jr $ra
; MIPS32-NEXT:    addiu $sp, $sp, 24
  %z = call float @llvm.minnum.f32(float %x, float %y)
  ret float %z
}

define double @minnum_double(double %x, double %y) {
; MIPS32R6-LABEL: minnum_double:
; MIPS32R6:       # %bb.0:
; MIPS32R6-NEXT:    jr $ra
; MIPS32R6-NEXT:    min.d $f0, $f12, $f14
;
; MIPS32-LABEL: minnum_double:
; MIPS32:       # %bb.0:
; MIPS32-NEXT:    addiu $sp, $sp, -24
; MIPS32-NEXT:    .cfi_def_cfa_offset 24
; MIPS32-NEXT:    sw $ra, 20($sp) # 4-byte Folded Spill
; MIPS32-NEXT:    .cfi_offset 31, -4
; MIPS32-NEXT:    jal fmin
; MIPS32-NEXT:    nop
; MIPS32-NEXT:    lw $ra, 20($sp) # 4-byte Folded Reload
; MIPS32-NEXT:    jr $ra
; MIPS32-NEXT:    addiu $sp, $sp, 24
  %z = call double @llvm.minnum.f64(double %x, double %y)
  ret double %z
}
